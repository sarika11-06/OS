#include <stdio.h>
#define MAX_PROCESSES 10

struct Process {
    int pid;
    int burst_time;
    int arrival_time;
    int remaining_time;
};

void sjf_preemptive(struct Process processes[], int n) {
    int current_time = 0;
    int completed = 0;
    int smallest;
    int total_waiting_time = 0;
    int total_turnaround_time = 0;
    printf("\nGantt Chart:\n");
    while (completed < n) {
        smallest = -1;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
                if (smallest == -1 || processes[i].remaining_time < processes[smallest].remaining_time) {
                    smallest = i;
                }
            }
        }
        if (smallest == -1) {
            current_time++;
            continue;
        }
        processes[smallest].remaining_time--;
        printf("| P%d ", processes[smallest].pid);
        current_time++;
        if (processes[smallest].remaining_time == 0) {
            completed++;
            int turnaround_time = current_time - processes[smallest].arrival_time;
            total_waiting_time += turnaround_time - processes[smallest].burst_time;
            total_turnaround_time += turnaround_time;
        }
    }
    printf("|\n");
    printf("\nProcess\t\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time,
               processes[i].burst_time,
               total_waiting_time - (current_time - processes[i].arrival_time) + processes[i].burst_time,
               total_turnaround_time - processes[i].arrival_time);
    }
    printf("\nAverage Waiting Time: %.2f\n", (float) total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float) total_turnaround_time / n);
}

int main() {
    int n = 3; // Number of processes

    // Initializing processes with arrival time and burst time
    struct Process processes[MAX_PROCESSES] = {
            {1, 2, 1, 2},  // Process 1: arrival_time=1, burst_time=2
            {2, 5, 2, 5},  // Process 2: arrival_time=2, burst_time=5
            {3, 6, 4, 6}   // Process 3: arrival_time=4, burst_time=6
    };

    sjf_preemptive(processes, n);
    return 0;
}
