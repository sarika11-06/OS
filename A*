import heapq

# A* Search
def a_star(graph, start, goal, h):
    open_list = []
    heapq.heappush(open_list, (0 + h[start], start))
    came_from = {}
    g_score = {start: 0}
    
    while open_list:
        current = heapq.heappop(open_list)[1]
        
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]
        
        for neighbor, cost in graph[current].items():
            tentative_g_score = g_score[current] + cost
            if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                g_score[neighbor] = tentative_g_score
                f_score = tentative_g_score + h.get(neighbor, 0)
                heapq.heappush(open_list, (f_score, neighbor))
                came_from[neighbor] = current

# Example graph (start -> (neighbor, cost)) and heuristic (h)
graph = {
    'A': {'B': 1, 'C': 3},
    'B': {'D': 1},
    'C': {'D': 1},
    'D': {}
}
h = {'A': 4, 'B': 2, 'C': 1, 'D': 0}  # heuristic values (from current node to goal)

print(a_star(graph, 'A', 'D', h))
