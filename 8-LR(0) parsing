#include <stdio.h>
#include <string.h>
#include <stdlib.h>

char stack[100];
int top = -1;

void push(char c) {
    stack[++top] = c;
}

char pop() {
    if (top == -1)
        return '\0';
    return stack[top--];
}

void printstack() {
    printf("\n$");
    for (int i = 0; i <= top; i++)
        printf("%c", stack[i]);
}

int main() {
    char input[100];
    int i = 0;
    printf("LR PARSING");
    printf("\nENTER THE EXPRESSION (e.g., id+id*id): ");
    scanf("%s", input);

    printf("\nSHIFT-REDUCE PARSING STEPS:\n");
    while (input[i] != '\0') {
        if (input[i] == 'i' && input[i + 1] == 'd') {
            push('E');
            printf("\nSHIFT -> id");
            printstack();
            i += 2;  // Skip both 'i' and 'd'
        } else if (input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/') {
            push(input[i]);
            printf("\nSHIFT -> %c", input[i]);
            printstack();
            i++;
        } else {
            printf("\nInvalid input at position %d", i);
            return 1;
        }

        // Try reducing E op E â†’ E
        while (top >= 2 && stack[top] == 'E' &&
               (stack[top - 1] == '+' || stack[top - 1] == '-' ||
                stack[top - 1] == '*' || stack[top - 1] == '/') &&
               stack[top - 2] == 'E') {
            pop(); // E
            pop(); // operator
            pop(); // E
            push('E'); // push reduced E
            printf("\nREDUCE E -> E op E");
            printstack();
        }
    }

    // Final reduction (if any)
    while (top >= 2 && stack[top] == 'E' &&
           (stack[top - 1] == '+' || stack[top - 1] == '-' ||
            stack[top - 1] == '*' || stack[top - 1] == '/') &&
           stack[top - 2] == 'E') {
        pop();
        pop();
        pop();
        push('E');
        printf("\nREDUCE E -> E op E");
        printstack();
    }

    if (top == 0 && stack[top] == 'E') {
        printf("\n\nExpression is successfully parsed.\n");
    } else {
        printf("\n\nParsing failed.\n");
    }

    return 0;
}
input - id + id
