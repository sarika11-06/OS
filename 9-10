#IRIS CLASSIFIER
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Perceptron
import random
from sklearn.metrics import classification_report

iris = load_iris()
iris.target_names

#We will merge the classes 'versicolor' and 'virginica into one class.
targets = (iris.target != 0).astype (np.int8)
print(targets)

datasets = train_test_split(iris.data, targets, test_size=0.2)
train_data, test_data, train_labels, test_labels = datasets

p = Perceptron(random_state=42, max_iter=10, tol=0.001)
p.fit(train_data, train_labels)

sample = random.sample(range(len(train_data)), 10)
for i in sample:
  print(i, p.predict([train_data[i]]))

print(classification_report(p.predict(test_data), test_labels))


10- #BREAST CANCER CLASSIFIER
from sklearn.neural_network import MLPClassifier
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report

#Load the Breast Cancer dataset
cancer_data = load_breast_cancer()
X, y = cancer_data.data, cancer_data.target


# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Standardize features by removing the mean and scaling to unit variance
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

#Create an MLPClassifier model
mlp = MLPClassifier(hidden_layer_sizes=(64, 32), max_iter=1000, random_state=42)

# Train the model on the training data
mlp.fit(X_train, y_train)

# Make predictions on the test data
y_pred = mlp.predict(X_test)

#Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Generate a classification report
class_report = classification_report(y_test, y_pred)
print("Classification Report:\n")
print(class_report)
