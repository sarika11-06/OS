#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
int tempVar = 1; // Counter for temporary variables
void generateTAC(char op, char arg1[], char arg2[], char result[]) {
    printf("%s = %s %c %s\n", result, arg1, op, arg2);
}
int isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}
void processExpression(char expr[]) {
    char tokens[10][10]; // Store tokens
    int tokenCount = 0;
    
    char *token = strtok(expr, " ");
    while (token != NULL) {
        strcpy(tokens[tokenCount++], token);
        token = strtok(NULL, " ");
    }
    if (tokenCount < 3) {
        printf("Invalid expression format!\n");
        return;
    }
    char temp1[10], temp2[10], result[10];
    for (int i = 1; i < tokenCount; i += 2) {
        if (tokens[i][0] == '*' || tokens[i][0] == '/') {
            sprintf(result, "t%d", tempVar++);
            generateTAC(tokens[i][0], tokens[i - 1], tokens[i + 1], result);
            strcpy(tokens[i - 1], result);
            for (int j = i; j < tokenCount - 2; j++) {
                strcpy(tokens[j], tokens[j + 2]);
            }
            tokenCount -= 2;
            i -= 2; // Re-evaluate after shifting tokens
        }
    }
    for (int i = 1; i < tokenCount; i += 2) {
        if (tokens[i][0] == '+' || tokens[i][0] == '-') {
            sprintf(result, "t%d", tempVar++);
            generateTAC(tokens[i][0], tokens[i - 1], tokens[i + 1], result);
            strcpy(tokens[i - 1], result);
            for (int j = i; j < tokenCount - 2; j++) {
                strcpy(tokens[j], tokens[j + 2]);
            }
            tokenCount -= 2;
            i -= 2; // Re-evaluate after shifting tokens
        }
    }
}

int main() {
    char expression[50];
    printf("Enter an arithmetic expression (e.g., a + b * c - d): ");
    fgets(expression, sizeof(expression), stdin);
    expression[strcspn(expression, "\n")] = '\0'; // Remove newline
    processExpression(expression);
    return 0;
}
