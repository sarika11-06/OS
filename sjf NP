#include <stdio.h>

// Function to find waiting time and turnaround time
void findWaitingTime(int processes[], int n, int bt[], int wt[]) {
    wt[0] = 0;

    // Calculate waiting time for all other processes
    for (int i = 1; i < n; i++) {
        wt[i] = 0;
        for (int j = 0; j < i; j++)
            wt[i] += bt[j];
    }
}

// Function to calculate turnaround time
void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    // Calculate turnaround time by adding burst time and waiting time
    for (int i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}

// Function to find the waiting time and turnaround time for all processes
void findAvgTime(int processes[], int n, int bt[]) {
    int wt[n], tat[n];

    // Calculate waiting time for all processes
    findWaitingTime(processes, n, bt, wt);

    // Calculate turnaround time for all processes
    findTurnAroundTime(processes, n, bt, wt, tat);

    // Calculate average waiting time and turnaround time
    float total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
    }
    float avg_wt = total_wt / n;
    float avg_tat = total_tat / n;

    // Print the results
    printf("Processes Burst Time  Waiting Time  Turnaround Time\n");
    for (int i = 0; i < n; i++)
        printf(" %d\t\t%d\t\t%d\t\t%d\n", i + 1, bt[i], wt[i], tat[i]);
    printf("\nAverage waiting time = %.2f\n", avg_wt);
    printf("Average turnaround time = %.2f\n\n", avg_tat);

    // Print Gantt Chart
    printf("Gantt Chart:\n");
    printf(" ");
    for (int i = 0; i < n; i++) {
        printf("|\tP%d\t", processes[i]);
    }
    printf("|\n");
    printf("0");
    for (int i = 0; i < n; i++) {
        printf("\t\t%d", tat[i]);
    }
    printf("\n");
}

int main() {
    // Number of processes
    int n = 4;

    // Array to store burst times of processes
    int bt[] = {6, 8, 7, 3};

    // Array to store process IDs
    int processes[] = {1, 2, 3, 4};

    // Call function to find average waiting time and turnaround time
    findAvgTime(processes, n, bt);

    return 0;
}
