import queue

# Breadth-First Search (BFS) using queue.Queue
def bfs(graph, start):
    visited = set()  # To track visited nodes
    q = queue.Queue()  # Create a FIFO queue using queue.Queue
    q.put(start)  # Enqueue the start node
    visited.add(start)

    while not q.empty():
        node = q.get()  # Dequeue the front element
        print(node, end=' ')  # Process the current node (for this case, just print it)

        # Add all unvisited neighbors to the queue
        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                q.put(neighbor)  # Enqueue unvisited neighbors

# Example graph as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# Start BFS from node 'A'
bfs(graph, 'A')
